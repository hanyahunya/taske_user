server:
  port: 8080

spring:
  application:
    name: user
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${TASKE_USER_DB_URL}
    username: ${TASKE_USER_DB_USERNAME}
    password: ${TASKE_USER_DB_PASSWORD}
#  jpa:
#    database-platform: org.hibernate.dialect.MySQL8Dialect
#    hibernate:
#      ddl-auto: update
#    generate-ddl: true
#    show-sql: false
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: none
    generate-ddl: false
    show-sql: false
  # kafka
  kafka:
    bootstrap-servers: ${KAFKA_HOST}:${KAFKA_PORT}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
    consumer:
      group-id: user-group
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      auto-offset-reset: earliest
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "com.hanyahunya.kafkaDto"
        spring.json.use.type.headers: true